{"version":3,"sources":["components/weather.js","components/forecast.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weatherData","className","name","Button","inverted","color","circular","icon","onClick","window","location","reload","moment","format","weather","main","src","alt","description","Math","round","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","Forecast","forecastData","WeatherIcon","styled","div","console","log","dailyData","results","map","item","index","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","dt_txt","temp_max","temp_min","style","fontSize","marginTop","List","aria-label","App","useState","lat","setLat","long","setLong","setWeatherData","setForecastData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","weatherAPI","fetch","process","forecastAPI","Promise","all","then","values","value","json","finalVals","weatherAPIResp","forecastAPIResp","list","filter","reading","includes","catch","error","fetchData","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d849429.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport './styles.css'\r\nimport moment from 'moment'\r\n// import {\r\n//   faCloud,\r\n//   faBolt,\r\n//   faCloudRain,\r\n//   faCloudShowersHeavy,\r\n//   faSnowflake,\r\n//   faSun,\r\n//   faSmog,\r\n// } from '@fortawesome/free-solid-svg-icons';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import styled from 'styled-components';\r\n\r\n\r\n\r\nconst Weather = ({weatherData}) => {\r\n\r\n//   const WeatherIcon = styled.div`\r\n//   color: whitesmoke;\r\n// `;\r\n\r\n  const refresh = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  // let weatherIcon = null;\r\n\r\n  // if (weatherData.weather[0].main === 'Thunderstorm') {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n  // } else if (weatherData.weather[0].main === 'Drizzle') {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n  // } else if (weatherData.weather[0].main === 'Rain') {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n  // } else if (weatherData.weather[0].main === 'Snow') {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n  // } else if (weatherData.weather[0].main === 'Clear') {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n  // } else if (weatherData.weather[0].main === 'Clouds') {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n  // } else {\r\n  //   weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n  // }\r\n\r\n\r\n  return (\r\n    <div className=\"main\">\r\n\r\n      <div className=\"top\">\r\n      {/* <WeatherIcon style={{fontSize:30,marginTop:5}}>{weatherIcon}</WeatherIcon> */}\r\n      <p className=\"header\">{weatherData.name}</p>\r\n      <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\r\n      </div>\r\n      \r\n      <div className=\"flex\">\r\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\r\n        <p className=\"description\">{weatherData.weather[0].main}</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n          <div>\r\n              <img className=\"weather_icon\" src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`} alt=\"weather icon\" />\r\n              <p className=\"temp\">{weatherData.weather[0].description}</p>\r\n          </div>\r\n          \r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temprature: {Math.round(weatherData.main.temp)} &deg;F</p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n      </div>\r\n    \r\n  </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Weather;\r\n\r\n","import React from \"react\";\r\nimport {\r\n  List\r\n} from \"@material-ui/core\";\r\nimport moment from 'moment';\r\nimport './styles.css';\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Forecast = ({forecastData}) => {\r\n  const WeatherIcon = styled.div`\r\n  color: whitesmoke;\r\n`; \r\n  console.log(forecastData.dailyData)\r\n\r\n  const results = forecastData.dailyData.map((item, index)=> {\r\n\r\n    let weatherIcon = null;\r\n\r\n    if (item.weather[0].main === 'Thunderstorm') {\r\n      weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n    }else if (item.weather[0].main === 'Drizzle') {\r\n      weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n    } else if (item.weather[0].main === 'Rain') {\r\n      weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n    } else if (item.weather[0].main === 'Snow') {\r\n      weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n    } else if (item.weather[0].main === 'Clear') {\r\n      weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n    } else if (item.weather[0].main === 'Clouds') {\r\n      weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n    } else {\r\n      weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n\r\n  }\r\n  return (\r\n    <div key={index} className=\"forecast\">\r\n      <div className=\"flex-forecast\">\r\n        <div className=\"day\">\r\n            <p className=\"day\">{moment(item.dt_txt).format(\"dddd\")}, <span>{moment(item.dt_txt).format('LL')}</span></p> \r\n        </div>\r\n      \r\n      <div className=\"forecast-temp\">\r\n         <p>{item.weather[0].description}</p>\r\n         <p>High: {Math.round(item.main.temp_max)}</p>\r\n         <p>Low: {Math.round(item.main.temp_min)}</p>\r\n      </div>\r\n      \r\n      <div>\r\n          <WeatherIcon style={{fontSize:25,marginTop:4}}>{weatherIcon}</WeatherIcon>\r\n      </div>\r\n      \r\n\r\n      <p className=\"flex-forecast\">\r\n         {Math.round(item.main.temp)} &deg;F\r\n      </p>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n  })\r\n\r\n  return(\r\n      <div>\r\n         <List aria-label=\"forecast data\">{results}</List>\r\n        </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default Forecast","import './App.css';\nimport React, { useEffect, useState } from \"react\"\nimport Weather from './components/weather'\nimport { Dimmer, Loader } from 'semantic-ui-react'\nimport Forecast from './components/forecast'\n\nexport default function App() {\n  \n  const [lat, setLat] = useState('')\n  const [long, setLong] = useState('')\n  const [weatherData, setWeatherData] = useState([])\n  const [forecastData, setForecastData] = useState([])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n        // console.log(position)\n      });\n\n      console.log(\"Latitude is:\", lat)\n      console.log(\"Longitude is:\", long)\n\n      // function handleResponse(response) {\n      //   if (response.ok) {\n      //     return response.json();\n      //   } else {\n      //     throw new Error(\"Please Enable your Location in your browser!\");\n      //   }\n      // }\n\n      if (lat !== '' && long !== '') {\n        let weatherAPI = fetch(`${process.env.REACT_APP_API_URL}/weather?lat=${lat}&lon=${long}&units=imperial&APPID=${process.env.REACT_APP_API_KEY}`)\n        let forecastAPI = fetch(`${process.env.REACT_APP_API_URL}/forecast?lat=${lat}&lon=${long}&units=imperial&APPID=${process.env.REACT_APP_API_KEY}`)\n     await Promise.all([weatherAPI, forecastAPI])\n    //  .then(res => Promise.all(handleResponse(res)))\n      .then(values => Promise.all(values.map(value => value.json())))\n      .then(finalVals => {\n        let weatherAPIResp = finalVals[0]\n        let forecastAPIResp = finalVals[1]\n        setWeatherData(weatherAPIResp)\n        const dailyData = forecastAPIResp.list.filter(reading => reading.dt_txt.includes(\"18:00:00\"))\n        setForecastData({dailyData})\n        console.log(weatherAPIResp, forecastAPIResp.list, dailyData)\n      })\n      .catch(error=>console.log(error));\n    }\n  }\n    fetchData();\n    \n  }, [lat, long])\n\n\n\n\n    return (\n      <div className=\"App\">\n        {(typeof weatherData.main != 'undefined' || typeof forecastData.dailyData != 'undefined') ? (\n          <div>\n            <Weather weatherData={weatherData} forecastData={forecastData}/>\n          </div>\n        ): (\n          <div>\n            <Dimmer active>\n              <Loader>Loading..Please enable your location in your browser.</Loader>\n            </Dimmer>\n          </div>\n        )}\n\n        {(typeof forecastData.dailyData != 'undefined') ? (\n          <div>\n            <Forecast forecastData={forecastData} />\n          </div>\n        ): (\n          <div>\n            <Dimmer active>\n              <Loader>Loading..Please enable your location in your browser.</Loader>\n            </Dimmer>\n          </div>\n        )}\n \n\n      </div>\n      \n    );\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}